




Redis | ü¶úÔ∏èüîó Langchain





Skip to main contentü¶úÔ∏èüîó LangChainJS/TS DocsGitHubCTRLKGet startedIntroductionInstallationQuickstartModulesModel I/‚ÄãOData connectionDocument loadersDocument transformersText embedding modelsVector storesIntegrationsAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchCassandraChromaClarifaiClickHouse Vector SearchActiveloop's Deep LakeDocArrayHnswSearchDocArrayInMemorySearchElasticSearchFAISSHologresLanceDBMarqoMatchingEngineMilvusMongoDB AtlasMyScaleOpenSearchpg_hnswPGVectorPineconeQdrantRedisRocksetSingleStoreDBscikit-learnStarRocksSupabase (Postgres)TairTigrisTypesenseVectaraWeaviateZillizRetrieversChainsMemoryAgentsCallbacksModulesUse casesGuidesEcosystemAdditional resourcesAPI referenceModulesData connectionVector storesIntegrationsRedisOn this pageRedisRedis (Remote Dictionary Server) is an in-memory data structure store, used as a distributed, in-memory key‚Äìvalue database, cache and message broker, with optional durability.This notebook shows how to use functionality related to the Redis vector database.Installing‚Äãpip install redisWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")Example‚Äãfrom langchain.embeddings import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores.redis import Redisfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()If you're not interested in the keys of your entries you can also create your redis instance from the documents.rds = Redis.from_documents(    docs, embeddings, redis_url="redis://localhost:6379", index_name="link")If you're interested in the keys of your entries you have to split your docs in texts and metadatastexts = [d.page_content for d in docs]metadatas = [d.metadata for d in docs]rds, keys = Redis.from_texts_return_keys(    texts, embeddings, redis_url="redis://localhost:6379", index_name="link")rds.index_namequery = "What did the president say about Ketanji Brown Jackson"results = rds.similarity_search(query)print(results[0].page_content)print(rds.add_texts(["Ankush went to Princeton"]))query = "Princeton"results = rds.similarity_search(query)print(results[0].page_content)# Load from existing indexrds = Redis.from_existing_index(    embeddings, redis_url="redis://localhost:6379", index_name="link")query = "What did the president say about Ketanji Brown Jackson"results = rds.similarity_search(query)print(results[0].page_content)Redis as Retriever‚ÄãHere we go over different options for using the vector store as a retriever.There are three different search methods we can use to do retrieval. By default, it will use semantic similarity.retriever = rds.as_retriever()docs = retriever.get_relevant_documents(query)We can also use similarity_limit as a search method. This is only return documents if they are similar enoughretriever = rds.as_retriever(search_type="similarity_limit")# Here we can see it doesn't return any results because there are no relevant documentsretriever.get_relevant_documents("where did ankush go to college?")Delete keysTo delete your entries you have to address them by their keys.Redis.delete(keys, redis_url="redis://localhost:6379")PreviousQdrantNextRocksetInstallingExampleRedis as RetrieverCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc.



