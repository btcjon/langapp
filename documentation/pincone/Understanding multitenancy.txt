Understanding multitenancy



























































































































































Jump to ContentLearnForumSupportSystem StatusContactGuidesAPI ReferenceExamplesLibrariesLearnForumSupportSystem StatusContactLog InSign Up FreeLog InSign Up FreeGuidesAPI ReferenceExamplesLibrariesAIGetting startedOverviewQuickstartExamplesChoosing index type and sizeorganizationsUnderstanding organizationsManaging costUnderstanding costMonitoring your usageManage billingUnderstanding subscription statusChanging your billing planSetting up billing through AWS MarketplaceSetting up billing through GCP MarketplaceprojectsUnderstanding projectsCreate a projectAdd users to projects and organizationsChange project pod limitRename a projectgcp-starter environmentindexesUnderstanding indexesManage indexesScale indexesUnderstanding collectionsBack up indexesUsing namespacesrecordsInsert dataManage dataSparse-dense embeddingsQuery dataFiltering with metadatadatasetsPinecone public datasetsUsing public Pinecone datasetsCreating and loading private datasetsoperationsUnderstanding multitenancyMonitoringPerformance tuningTroubleshootingMoving to productionIntegrationsOpenAICohereHaystackHugging Face Inference EndpointsElasticsearchDatabricksLangChainreferencePython ClientNode.JS ClientLimitsRelease notesLibrariesArchitectureSupportSupport ForumSupport PortalStatusSecurityUnderstanding multitenancySuggest EditsOverview
This document describes concepts related to multitenancy in Pinecone indexes. This includes information on different approaches to keeping sets of vectors separate within a Pinecone index. To learn how to create or modify an index, see Manage indexes.
You may need to segment vectors by customer or otherwise either physically or logically. This document describes different techniques to accomplish this and the advantages and advantages of each approach. 
Namespaces
One approach to multitenancy is to use namespaces to isolate segments of vectors within a single index. This is a 'pool' model that shares most resources between tenants while keeping them logically separate.
Advantages

Namespaces reduce the need for additional indexes, reducing maintenance effort.

Disadvantages

Customer data is not isolated in its own pod. This means tenants share compute and storage resources.
Deleting tenant data is more complicated and takes more time.

Metadata filtering
This approach to multitenancy stores all segments of vectors in a single index and filters by metadata at query time. This is another 'pool' model; here, you separate tenants on the query level.
Advantages

Metadata filtering allows you to query across multiple tenants.
Metadata filtering reduces the need for additional indexes, reducing maintenance effort.

Disadvantages

Customer data is not isolated in its own pod. This means tenants share compute and storage resources.
There is no way to track tenant-specific costs.
You cannot provision tenants with different dimensions or pod type characteristics, which are set at the index level.

Separate indexes
Another approach to multitenancy is to create a separate index for each segment. This is a 'silo' model that provides dedicated resources to each tenant. For example, if you need to separate vectors for each customer, you can create a separate index for each customer.
Advantages

This model separates tenants into different pods, preventing queries across tenants and allocating compute and storage resources to each tenant.

Disadvantages

Creating and maintaining multiple indexes requires additional effort and cost.
Because this model doesn't share resources between tenants, you must assign each tenant at minimum one pod. This is extremely inefficient if you have tenants with small number of vectors.
Creating a new index takes more time than creating a namespace.
Updated 24 days ago Table of Contents

Overview


Namespaces

Advantages
Disadvantages



Metadata filtering

Advantages
Disadvantages



Separate indexes

Advantages
Disadvantages







Documentation


Learning Center


Developer Forum


Support Center


Status Page


Careers




Â© Pinecone Systems, Inc. | San Francisco, CA | Terms | Privacy | Cookies | Trust & Security | System Status
Pinecone is a registered trademark of Pinecone Systems, Inc.




























































